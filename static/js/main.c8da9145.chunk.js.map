{"version":3,"sources":["../../Quote Machine/quote-machine/src/App.jsx","../../Quote Machine/quote-machine/src/serviceWorker.js","../../Quote Machine/quote-machine/src/index.jsx"],"names":["App","react_default","a","createElement","App_QuoteMachine","quotes","author","Component","QuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","randomQuote","Math","floor","random","length","buttonHandler","bind","assertThisInitialized","setState","document","body","style","Fragment","className","id","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAGMA,0LAiBF,OAAOC,EAAAC,EAAAC,cAACC,EAAD,CAAcC,OAdR,CACX,8DACA,iDACA,gEACA,6GACA,gJASmCC,OAPxB,CACX,YACA,cACA,WACA,eACA,yBAfYC,cAsBZC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXZ,OAAQI,EAAMJ,OACdC,OAAQG,EAAMH,OACdY,YAAaC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAMJ,OAAOiB,SAGvDZ,EAAKa,cAAgBb,EAAKa,cAAcC,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KATJA,+EAcjBG,KAAKa,SAAS,CACZR,YAAaC,KAAKC,MAAMD,KAAKE,SAAWR,KAAKJ,MAAMJ,OAAOiB,2CAQ5D,OAFAK,SAASC,KAAKC,MAAQ,qBAGpB5B,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,SAAP,KAEE7B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,uCAAuCC,GAAG,aACvD/B,EAAAC,EAAAC,cAAA,QAAM4B,UAAU,wBAAhB,kBAIF9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,aACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,UACf9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,4BAA4BC,GAAG,aAC5C/B,EAAAC,EAAAC,cAAA,cAAY6B,GAAG,OAAOD,UAAU,mBAC7BlB,KAAKI,MAAMZ,OAAOQ,KAAKI,MAAMC,cAEhCjB,EAAAC,EAAAC,cAAA,UAAQ6B,GAAG,SAASD,UAAU,0BAC3BlB,KAAKI,MAAMX,OAAOO,KAAKI,MAAMC,cAIhCjB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,aACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,SACb9B,EAAAC,EAAAC,cAAA,KAAG8B,KAAK,2BAA2BD,GAAG,eACpC/B,EAAAC,EAAAC,cAAA,KAAG4B,UAAU,2BAGjB9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,UAEf9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,cACb9B,EAAAC,EAAAC,cAAA,UACE6B,GAAG,YACHD,UAAU,kBACVG,QAASrB,KAAKU,eAHhB,oBAWRtB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,oBAjEAxB,aAyEZP,UCtFKmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECRNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASf,SAASgB,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8da9145.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactFCCtest from \"react-fcctest\";\n\nclass App extends Component {\n  render() {\n    //Quotes and authors.  Quotes are matched with author by index.\n    let quotes = [\n      \"\\\"Don't cry because it's over, smile because it happened.\\\"\",\n      '\"Be yourself; everyone else is already taken.\"',\n      '\"You only live once, but if you do it right, once is enough.\"',\n      '\"If you want to know what a man\\'s like, take a good look at how he treats his inferiors, not his equals.\"',\n      '\"I\\'ve learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.\"'\n    ];\n    let author = [\n      \"Dr. Suess\",\n      \"Oscar Wilde\",\n      \"Mae West\",\n      \"J.K. Rowling\",\n      \"Maya Angelou\"\n    ];\n    return <QuoteMachine quotes={quotes} author={author} />;\n  }\n}\n\n//The Quote Machine Component\nclass QuoteMachine extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quotes: props.quotes,\n      author: props.author,\n      randomQuote: Math.floor(Math.random() * props.quotes.length) //Chooses a random index for our quote.\n    };\n\n    this.buttonHandler = this.buttonHandler.bind(this);\n  }\n\n  //Changes the quote by updating the state with a new quote index\n  buttonHandler() {\n    this.setState({\n      randomQuote: Math.floor(Math.random() * this.props.quotes.length)\n    });\n    return;\n  }\n\n  render() {\n    document.body.style = \"background: beige;\";\n\n    return (\n      <React.Fragment>\n        {/* Page Title */}\n        <nav className=\"navbar fixed-top navbar-dark bg-dark\" id=\"title-box\">\n          <span className=\"navbar-brand mb-0 h1\">Quote Machine</span>\n        </nav>\n\n        {/* Quote Box */}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-3\" />\n            <div className=\"card text-center col-md-6\" id=\"quote-box\">\n              <blockquote id=\"text\" className=\"blockquote mb-2\">\n                {this.state.quotes[this.state.randomQuote]}\n              </blockquote>\n              <footer id=\"author\" className=\"blockquote-footer mb-2\">\n                {this.state.author[this.state.randomQuote]}\n              </footer>\n\n              {/* Button */}\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-3\">\n                    <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\n                      <i className=\"fab fa-twitter col-3\" />\n                    </a>\n                  </div>\n                  <div className=\"col-4\" />\n\n                  <div className=\"col-5 mb-3\">\n                    <button\n                      id=\"new-quote\"\n                      className=\"btn btn-primary\"\n                      onClick={this.buttonHandler}\n                    >\n                      Random Quote\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-3\" />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n//yield;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"../node_modules/jquery\";\nimport Popper from \"../node_modules/popper.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}